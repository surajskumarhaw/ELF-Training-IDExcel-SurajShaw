-------------------------------------------------------------------------------------------------------------------
=======================     PostgreSQL Queries    =============================
-------------------------------------------------------------------------------------------------------------------


1.  Write a query to check the version ? 
--- select version();

2.  Write a query to show all the database ?
--- \l

3.  Write a query to create database ?
--- create database Database_Name; 

4.  Write a query to use a perticular Database ?
--- \c Database_Name

5.  Write a query to clear the screen ?
--- \! cls

6.  Write a query to check whether the data is present in a particular database or not ?
--- \d

7.  Write a query to describe a perticular table ?
--- \d Table_Name


--------
  DDL
--------

8.  Write a query to create a table ?
Syntax : create table Table_Name(Column_Name1 datatype constraints,Column_Name2 datatype constraints);
	Ex - create table Table_Name(id int primary key,name varchar(150) not null ,email varchar(200));
	     - create table Employee(empId int primary key,ename varchar(150),designation varchar(150),hiredate date not null, sal double precision,age int,emailId varchar(150),deptno int,mobileNo bigint not null);

9.  Write a query to alter a table ?
Syntax :  alter table Table_Name add column Column_Name int;

10.  Write a query to remove a column ?
Syntax :  alter table Table_Name drop column Column_Name;

11.  Write a query to change the name of the column ?
Syntax :   alter table Table_Name rename column Old_Column_Name to New_Column_Name;

12.  Write a query to change the name of the table ?
Syntax :   alter table Old_Table_Name rename to New_Table_Name;

13.  Write a query to change the database name ?
Syntax :  alter database Old_Database_Name rename to New_Database_Name;

14.  Write a query to drop the database ?
Syntax :   drop database DB_Name;

15.  Write a query to drop the table ?
Syntax :   drop table Table_Name;


Truncate :
------------

Truncate is use to delete the whole table data permanently but it doesn't delete table structure.

Syntax : truncate table table_name;


---------
  DML
---------

16.  Write a query to insert a data into table ?
Syntax :   insert into Table_Name (Column_Name1 ,Column_Name2 , Column_Name3 ,Column_Name4) values(value1,value2,value3,value4);
	Ex - insert into person(id,name,email) values(1,'Suraj','suraj@xyz.com');

Question
------------
- WAQ to insert more than one record in a same query-
- insert into employee values (1011,'srestha','hr','2019-05-10',555100.65,22,'srestha@gamil.com',10,5871245674),(1012,'richa','hr','2019-06-10',55510.65,22,'richa@gamil.com',20,9871245674);


17.  Write a query to update a date into table ?
Syntax :  update Table_Name set Column_Name=value;
		Ex - update employee set sal=250000;
		        update employee set sal=250000 where eid=1007;

18.  Write a query to delete a record from the table ?
Syntax :   delete from Table_Name;
		Ex - delete from employee;
		       delete from employee where eid=1008 ;



----------
  DQL
----------

===>There are 3 different ways to retrive the data from the table
	1. Projection: selecting a column. 
	    Ex - select ename from employee;
	2. Selection: selecting rows as well as column.  
	    Ex - select * from employee;
	3. Join: retrival of data from multiple table in a same time.

===>Order of execution
	1. from
	2. where
	3. select

19.  Write a query to show the table data ?
Syntax :   select * / [Distinct] Column_Name / Expression [Alias] from Table_Name;
	Ex - select * from employee;
	       select ename from employee;
	       select * from employee where empid=1006;

Question
-----------
- WAQ to display name, deptno, doj ?
- select ename,deptno,hiredate from employee;

WHERE Clause
-------------------
- It it use to filter the data.
- It goes row wise.
- If the condition satisfy then only it will proceed further

Syntax :  select * from Table_Name where condition;

Questions
------------
- Write a query to delete a record whose eid is 1008 ?
   - delete from employee where eid=1008 ;

- Write a query to update sal to 250000 whose eid is 1007 ?
   - update employee set sal=250000 where eid=1007;

- Write a query to show the details whose eid is 1007 ?
   - select * from employee where empid=1006;


======================================================================================================

20. WAQ to delete a record whose empid is 1003 ?
---  delete from employee where empid=1003;


Expression :
---------------
- Expression is a statement which gives result.
- Expression consist of operators and operand.

    Ex - 8=4+4	+ operators 
		4,8 operand
    Ex - incrSal = sal + 500   incrSal - statement
	
Operands :
-------------
1. Column_Name
2. Literals :
              The direct value or real value used in the SQL statement.
                 2.1  Number - The direct value used as a number type is know as number literals.
	2.2  Character - 'suraj'
	2.3  Date - '2020-02-28'

Operators :
-------------
- An operator is reserved word or a character used primarily in an SQL statement.

1. Airthmetic Operators --- (+,-,*,/,%)
2. Comparison Operators --- (=, <, >, >=, <=, !=, <>)
3. Logical Operators --- (AND, OR, NOT)
4. Special Operators --- (IN, BETWEEN, IS, LIKE)


Alias :
--------
Alias are used to give a table or column in a table, a temporary name.

Syntax : select Column_Name AS Alias_Name from Table_Name AS Alias_Name;
              select Column_Name Alias_Name from Table_Name Alias_Name;

21. Write a query to display desgination as job_type ?
---  select desgination as job_type from employee;
---  select desgination job_type from employee;

Assignment Questions
--------------------------
22. Write a query to obtained ename and current_sal and new_sal with the hike of 25% of all emp;
---  select ename,sal curr_sal,((sal*25)/100)+sal new_sal from employee;
---  select ename,sal curr_sal,sal*1.25 new_sal from employee;

23. Write a query to display all the record of the emp and incremented sal of 500 with each emp;
---  select employee.*,sal+500 incremented_sal from employee;

24. Write a query to display all the record of the emp and decrement sal of 500 with each emp;
---  select employee.*,sal-500 decremented_sal from employee;

25. Write a query to display name, sal and annual sal of all the emp;
---  select ename,sal,sal*12 annual_sal from employee;

26. Write a query to display per day sal ?
---  select sal/30 per_day_sal from employee;


================================================================================================

Distinct :
----------
-- If the single value has passed then it will elemenate the duplicate value.
-- If i'm having more than one column name is passed then it will remove the combination of duplicate. 

Syntax : select distinct column_name from table_name;
Ex - select distinct ename from employee;

27. WAQ for show the two distinct column name ?
---  select distinct ename ,deptno from employee;

28. WAQ to display all the employee who is working in deptno=10 ?
---  select * from employee where deptno=10;

29. WAQ to display all the employee whose sal is greater than 10k ?
---  select * from employee where sal>10000;

30. WAQ to display all the employee whose sal is greater than and equal to 10k ?
---  select * from employee where sal>=10000;

31. WAQ to display all the employee whose sal is less than 10k ?
---  select * from employee where sal<10000;

32. WAQ to display all the employee whose sal is less than and equal to 10k ?
---  select * from employee where sal<=10000;

30. WAQ to display all the employee whose sal is not equal to 10k ?
---  select * from employee where sal!=10000;
---  select * from employee where sal<>10000;


===================================================================================================

Logical Operators :
----------------------

   AND operator : 
----------------------
Note : If both the condition is true then we proceed further.

input1  input2      output
-------  --------      -------
   0           0               0
   0           1               0
   1           0               0
   1           1               1

Syntax : SELECT * FROM table_name WHERE condition 1 AND condition 2;


31. WAQ to display all employee who is working as hr and his deptno is 20 ?
---  select * from employee where designation='hr' and deptno=20;

32. WAQ to display all the record of the employee who is working as a salesman and doj is after 2018 ?
---  select * from employee where designation='salesman' and hiredate>'10-01-2018';

33.  WAQ to display all the record  of the employee who is working as a hr in deptno 20 only if sal > 25000 ?
---   select * from employee where designation='hr' and deptno=20 and sal>25000;


  OR operator :
------------------
Note : If only one condition is true then we proceed further.

input1  input2      output
-------  --------      -------
   0           0               0
   0           1               1
   1           0               1
   1           1               1

Syntax : SELECT * FROM table_name WHERE condition 1 OR condition 2;

34.  WAQ to display employee working in dept 10,20 ?
---   select * from employee where deptno =10 or deptno =20;

35.  WAQ to display name, sal, deptno who is working as tester or whose sal=15000 ?
---   select ename,sal,deptno from employee where designation='tester' or sal=15000;

36.  WAQ to display name of all employee working as tester as well as deptno 30 or working as clerk and whose  sal>=15000 ?
---   select ename from employee where (designation='tester' and deptno=30) or (designation='tester' and sal>=15000);

  NOT operator :
--------------------
Note : If we don't have to pass the condition.

input  output
------  --------
   0          1
   1          0

Syntax : SELECT * FROM table_name WHERE NOT condition;

37.  WAQ to display all the employee except deptno 10 ?
---   select * from employee where not deptno=10;


===================================================================================================

Order of execution of logical operator :
-----------------------------------------------
1. NOT
2. AND
3. OR

38.  WAQ to display all the record of employee excluding hr who is working in deptno. 30 ?
---   select * from employee where not (designation='hr' and deptno=30);

39.   WAQ to display all the employee who has hired after jan-2015 working as tester in deptno 20 or display all the employee who where hired before 2015 ?
---   select * from employee where (hiredate>'31-01-2015' and designation='tester' and deptno=20) or (hiredate<'01-01-2015');

40.  WAQ  to display all the record of the employee who is working in deptno 10 or 30 or 40 or 20 ?
---   select * from employee where deptno=10 or deptno=40 or deptno=30 or deptno=20;



Special operator :
---------------------

IN operator : 
---------------
Syntax : SELECT* FROM table_name WHERE column_name IN(value1, value2, ....., value n);

41.  WAQ  to display all the record of the employee who is working in deptno 10 or 30 or 40 or 20 ?
---   select * from employee where deptno IN(10,20,30,40);

42.  WAQ to display all the record of the employee who is working as salesman, hr or tester ?
---   select * from employee where designation IN('salesman','hr','tester');


NOT IN operator :
----------------------
Syntax : SELECT * FROM table_name WHERE column_name NOT IN(value1, value2, ....., value n);

43.  WAQ to display all the record of the employee who are working in deptno 20,30,40 excluding salesman, hr ?
---   select * from employee where deptno IN(20,30,40) and designation NOT IN('salesman','hr');


BETWEEN operator :
-------------------------
Syntax : SELECT * FROM table_name WHERE column_name BETWEEN value1 AND value2;

44.  WAQ to display all the record of the employee whose sal range within 20000 to 40000 ?
---   select * from employee where sal>20000 and sal<40000;

45.  WAQ to display the detail of employee who where hired during 2014 ?
---   select * from employee where hiredate BETWEEN '01-01-2014' and '31-12-2014';

46.  WAQ to display ename,sal who are working in deptno 10,20 and there annual sal between 40k to 50k ?
---   select ename, sal*12 annual_sal from employee where deptno in(10,20) and (sal*12 between 400000 and 5000000);


NOT BETWEEN operator :
--------------------------------
Syntax : SELECT* FROM table_name WHERE column_name NOT BETWEEN value1 AND value2;

47.  WAQ to display all the employee excluding those who are hired in 2017 ?
---   select * from employee where hiredate NOT BETWEEN '01-01-2017' and '31-12-2017';


IS operator :
---------------
Syntax : SELECT * FROM table_name WHERE column_name IS NULL;

NULL : It means no value not either 0 or space.
a+NULL=NULL

IS operator is used to check only the null value.


IS NOT operator :
---------------------
Syntax : SELECT * FROM table_name WHERE column_name IS NOT NULL;


========================================================================================================

LIKE operator :
-------------------
It is used to perform pattern matching.

Syntax : SELECT * FROM table_name WHERE column_name LIKE '%/_';

Character
-----------
Ordinary Character : Which don't have any special behaviour or meaning.
	Ex : a-z, 0-9, A-Z
Special Character : Which have special behaviour or meaning.
	Ex : *, _ (underescore), %(Percentage)


48. WAQ to display all the record of the employee whose name starts with 'r' ?
---  select * from employee where ename like 'r%';

49. WAQ to display all the record of the employee whose name having only 3 character ?
---  select * from employee where ename like '___';

50. WAQ to display all the record of the employee who has at least 2 'l' in there name ?
---  select * from employee where ename like '%l%l%';

51. WAQ to display all the record of the employee whose name starts with 's' and ends with 't' ?
---  select * from employee where ename like 's%t';

52. WAQ to display all the record of the employee whose name length 5 and starts with 's' and l should be the second last character ?
---  select * from employee where ename like 's__l_';

53. WAQ to display all the record of the employee if the employee name began with 's' or 'a' ?
---  select * from employee where ename like 's%' or ename like 'a%';

54. WAQ to display all the record of the employee excluding 1st name began with 's' and 't' ?
---  select * from employee where ename not like 's%' and ename not like 't%';


=======================================================================================================

Functions :
-------------
It is used to perform some specific task.

Types of function :
----------------------
1. Aggregate function (multi row function) 
--------------------------------------------------
	- n no. of input 
	- one output
	- EX - AVG()-return average value,
	          COUNT()-it counts the number of row,
	          MAX()-return maximum value of the column, 
	          MIN()-return minimum value of the column,
	          SUM()-return sum of all the value of the column.

	1) AVG()
	-----------
	Syntax : select avg(column_name) from table_name;
	Ex - select avg(sal) from employee;

	2) COUNT()
	---------------
	Syntax : select count(column_name) from table_name;
	Ex - select count(*) from employee;

	3) MAX()
	-----------
	Syntax : select MAX(column_name) from table_name;
	Ex - select max(sal) from employee;

	4) MIN()
	-----------
	Syntax : select MIN(column_name) from table_name;
	Ex - select min(sal) from employee;

	5) SUM()
	-----------
	Syntax : select SUM(column_name) from table_name;
	Ex - select sum(sal) from employee;

55. WAQ to display all aggregate function?
---  select sum(sal) sumsal,avg(sal) avgsal,count(*) noofcol, max(sal) maxsal,min(sal) minsal from employee;

2. Scalar function (single row function)
----------------------------------------------
	- n no. of input
	- n no. of output
	- EX - upper() - It converts the value of a field to uppercase,
	           lower() - It converts the value of a field to lowercase,
	           length() - It returns the length of the value in a text field,
	           concat() - It is used to concatenate two strings,
	           reverse() - It is use to reverse a string.

===========================================================================================

Order By :
------------
Order By clause is used to sort the table either ascending order or descending order.
By default the order is in ascending order.
Order by clause always execute after the select clause.
Order by clause should always the last clause in the query.
If the group by clause used with order by clause we can use multi row function only for the cloumn name.
In order by clause we used alias name.

Syntax : SELECT column1, column2/* FROM table_name ORDER BY column1 ASC|DESC;

56. WAQ to display all the record of the employee according to the sal is in desc order ?
--- select * from employee order by sal desc;

57. WAQ to display all the record of the employee and sort the record in desc order of hiredate if there are more then one emp hired on the same date the highest sal should be shown first ?
---  select * from employee order by hiredate desc,sal desc;

58.  WAQ to display ename, sal, annual_sal and sort the record in desc order in their annual_sal ?
---   select ename,sal,sal*12 as annual_sal from employee order by annual_sal desc;

59.  WAQ to display name,designation of all the emp who are working in either of the dept 10,20,30 and sort the record in asc order by there sal ?
---   select ename,designation from employee where deptno in(10,20,30) order by sal;


==============================================================================================

Group By :
-------------
The GROUP BY statement groups rows that have the same values into summary rows.
The GROUP BY statement is often used with aggregate functions (COUNT, MAX, MIN, SUM, AVG) to group the result-set by one or more columns.
GB clause execute row by rows.
After the execution of GB clause the records are grouped therefore all the clauses which execute after the execution of GB clause.

order of execution - from -> where -> group by -> select

Syntax : SELECT column_name(s)/*  FROM table_name WHERE condition GROUP BY column_name(s);

60.  WAQ to display no. of count of the employee working in each dept ?
---   select count(*) from employee group by deptno; 
---   select count(*),deptno from employee group by deptno; 

61.  WAQ to display the highest sal of employee in each dept ?
---   select max(sal) from employee group by deptno;
---   select max(sal),deptno from employee group by deptno;

62.  WAQ to display no. of tester working in each dept ?
---   select count(*) from employee where designation='tester' group by deptno;
---   select count(*),deptno from employee where designation='tester' group by deptno;


Having Clause :
------------------
Having clause is use to filter the group on condition.
Having clause is always used with group by clause.
Having clause always execute after the execution of Group By clause.
In having clause we can only use a cloumn which is used in a group by clause.

order of execution - from -> where -> group by -> having -> select

Syntax : SELECT column_name(s)/*  FROM table_name WHERE row_filter_condition GROUP BY column_name(s) HAVING group_filter_condition;

63.  WAQ to display the deptno which has atleast two clerk ?
---   select deptno from employee where designation='clerk' group by deptno having count(*)>=2;


==========================================================================================================

64.  WAQ to display deptno which has total sal>10000 in each dept ?
---   select deptno from employee group by deptno having sum(sal)>10000;
   
65.  WAQ to display deptno which has atleast two emp hired on the same date ?
---   select deptno from employee group by hiredate,deptno having count(*)>=2;

66.  WAQ to display deptno and avg sal of all the dept whose avg sal is > 15000 by excluding the emp whose name begains with r ?
---    select deptno,avg(sal) from employee where ename not like 'r%' group by deptno having avg(sal)>15000;


===========================================================================================================
-----------------
 SUBQUERY
-----------------
A query written inside another query is known as Subquery.
Subquery also known as nested query or inner query.
Subquery always enclosed with parentheses.

Syntax : select * from table_name where column_name operator (select */column_name from table_name condition);
			Outer Query				Inner Query

Types of Subquery :
1. Single row
    If the inner query returns one output then it is known as single row subquery.
    Single value operators such as ( =, <, >, <=, >= ) use in Single row Subquery.

    Syntax : select * from table_name where column_name comparison/relational operator (select */column_name from table_name condition);
			Outer Query				Inner Query

2. Multi row
    If the inner query returns more than one output then it is known as multi row subquery.
    Multi value operator such as (IN, ALL, ANY) use in Multi row subquery.

    Syntax : select * from table_name where column_name operator (select */column_name from table_name condition);
			Outer Query				Inner Query

=============================================================================================================

67. WAQ to display ename of all the emp who where hired after sumit ?
---  select ename from employee where hiredate>(select hiredate from employee where ename='sumit');

68. WAQ to display name of all the emp who is working for research dept ?
---  select ename from employee where deptno=(select deptno from dept where dname='research');

69. WAQ to display name of employee who is working in loc which has atleast 1 'a' in its location ?
---  select ename from employee where deptno in(select deptno from dept where location like '%a%');

70. WAQ to find 2nd max sal ?
---  select max(sal) from employee where sal<(select max(sal) from employee);

---------------
Assignment :
---------------

71. WAQ to display dname which has atleast two clerk ?
---  select dname from dept where deptno in(select deptno from employee where designation='clerk' group by designation,deptno having count(*)>=2);

72. WAQ to find 3rd max sal ?
---  select max(sal) from employee where sal<(select max(sal) from employee where sal<(select max(sal) from employee));

73. WAQ to display the name of the emp who where hired before bipul and there sal is greater than rohit ?
---  select ename from employee where (hiredate<(select hiredate from employee where ename='bipul')) and (sal>(select sal from employee where ename='rohit'));


======================================================================================================================
-------
Joins
-------
Join is use to retrival of data from multiple table in a same time.
minimum requirement for joining table is , at least two table should be there.

Types of joins :
------------------
1. Cross join
2. Inner join
3. Outer join
4. Self join 
5. Natural join

==================================================================================================================

1. Cross join (Cartesion join) :
------------------------------------
	T1
---------------------------
|A1            |B1             |
---------------------------
|A              |10             |
|B              |20             |
|C              |30             |
---------------------------

	T2
---------------------------
|A2	|B2	|
---------------------------
|D	|100	|
|E	|200	|
|F	|300	|
---------------------------

T1 cross join T2
-----------------------------------------------------
|A1	|B1	|A2	|B2	|
-----------------------------------------------------
|A	|10	|D	|100	|
|A	|10	|E	|200	|
|A	|10	|F	|300	|
|B	|20	|D	|100	|
|B	|20	|E	|200	|
|B	|20	|F	|300	|
|C	|30	|D	|100	|
|C	|30	|E	|200	|
|C	|30	|F	|300	|
-----------------------------------------------------

Syntax : select */Column_name from table1 cross join table2;


--------------
Inner join :
--------------
Joining two table with a join condition.

	T1
--------------------------
|A1	|B1	|
--------------------------
|A	|10	|
|B	|20	|
|C	|30	|
--------------------------

	T2
--------------------------
|A2	|B2	|
--------------------------
|B	|100	|
|C	|200	|
|F	|300	|
--------------------------

T1.A1=T2.A2
----------------------------------------------------
|A1	|B1	|A2	|B2	|
----------------------------------------------------
|B	|20	|B	|100	|
|C	|30	|C	|200	|
----------------------------------------------------

Syntax : select * from table1 inner join table2 on join_condition;
             Ex - select * from employee e inner join dept d on e.deptno=d.deptno;

74. WAQ to display dname loc of all the emp whose sal is>=40000 ?
--- select dname,location from employee e inner join dept d on e.deptno=d.deptno and sal>=40000 ;

75. WAQ to display ename and all the detail of the dept if emp where hired after 2015 and working in delhi or bangalore ?
---  select ename,d.* from employee e inner join dept d on e.deptno=d.deptno and to_char(hiredate,'YYYY')>'2015' and d.location in('delhi','bangalore');

76. WAQ to display ename,dname if the ename starts with 's' or 'p' and there dname has at least one 'e' in it ?
---  select ename,dname from employee e inner join dept d on e.deptno=d.deptno and (ename like 's%' or ename like 'p%') and dname like '%e%';

===========================================================================================================

3. Outer Join :
-----------------
I.   Left Outer Join
II.  Right Outer Join
III. Full Outer Join

I. Left Outer Join :
----------------------

Whenever we are retriving first we will get inner join and then we will get unmatch record of left table.

Syntax : SELECT */column_name FROM table1 LEFT JOIN table2 ON condition(T1.A1=T2.A2);

      T1 (Left Table)
--------------------------
|A1	|B1	|
--------------------------
|A	|10	|
|B	|20	|
|C	|30	|
--------------------------

    T2 (Right Table)
--------------------------
|A2	|B2	|
--------------------------
|D	|100	|
|B	|200	|
|C	|300	|
--------------------------

            LOJ - T1.A1=T2.A2
----------------------------------------------------
|A1	|B1	|A2	|B2	|
----------------------------------------------------
|B	|20	|B	|200	|
|C	|30	|C	|300	|
|A	|10	|null	|null	|
----------------------------------------------------


II. Right Outer Join :
----------------------
 
Whenever we are retriving first we will get inner join and then we will get unmatch record of right table.

Syntax : SELECT */column_name FROM table1 RIGHT JOIN table2 ON condition(T1.A1=T2.A2);

      T1 (Left Table)
--------------------------
|A1	|B1	|
--------------------------
|A	|10	|
|B	|20	|
|C	|30	|
--------------------------

    T2 (Right Table)
--------------------------
|A2	|B2	|
--------------------------
|D	|100	|
|B	|200	|
|C	|300	|
--------------------------

            ROJ - T1.A1=T2.A2
----------------------------------------------------
|A1	|B1	|A2	|B2	|
----------------------------------------------------
|B	|20	|B	|200	|
|C	|30	|C	|300	|
|null	|null	|D	|100	|
----------------------------------------------------


====================================================================================================

III. Full Outer Join :
------------------------

Whenever we are retriving first we will get inner join and then we will get unmatch record of both the table.

Syntax : SELECT */column_name FROM table1 FULL JOIN table2 ON condition(T1.A1=T2.A2);

77. WAQ to obtain a dept name which do not have emp working in it ?
---  select dname from employee e right join dept d on e.deptno=d.deptno where ename is null;

78.  WAQ to obtain ename who is not working in any dept ?
---   select e.ename from employee e left join dept d on e.deptno=d.deptno where d.deptno is null;


----------------
Natural Join :
----------------

When common column present in the both the table then it gives the result as inner join and 
When common column not present in the both the table then it gives the result as cross join.

Syntax : SELECT */column_name FROM table1 NATURAL JOIN table2;


========================================================================================================

Self Join :
------------

Merging of same table is known as Self join.

Syntax : SELECT * FROM table t1 join table t2 ON condition;


Q) Find out the difference b/w drop, truncate and delete ?
-------------------------------------------------------------------
DELETE:

Removes rows from a table. Delete rows one at a time & records an entry in the transaction log for each deleted row.
Deleted data can be rollback.
DML command
When the DELETE statement is executed using a row lock, each row in the table is locked for deletion.


TRUNCATE:

TRUNCATE removes all rows from a table.
TRUNCATE TABLE always locks the table and page but not each row.
If we truncate a table, then truncate table statement cannot be rolled back in some of the database.
Truncate table statement is a Data Definition Language.


DROP:

The DROP in SQL command removes a table along with its structure from the database




--------------------------
Single Row Function :
--------------------------

1. Character Single Row Function :
-----------------------------------------
   I. Case
   II. Character

Case :
-------
  upper()
  lower()
  initcap()

Character :
-------------
i.  length(String)
    Ex - select length(ename) from employee;

ii.  concat(string1, string2, ...., string_n)
     Ex - select concat(ename,designation) from employee;

iii.  reverse(string)
      Ex - select reverse(ename) from employee;

iv.  replace(string, old_string, new_string)
      Ex -  select replace(ename,'suraj','kumar') from employee;

v.  substr(string, starting_position, length)
     Ex - select substr(ename,2,1) from employee;

vi.  position(search_string IN main_string)
      Ex - select position('Sql' in 'postgreSql');
             select position('s' in ename) from employee;

vii.  trim([leading\trailing\both] <remove String> from <main String>)
       Ex - select trim(leading 'm' from 'madam');
              select trim(trailing 'm' from 'madam');
              select trim('m' from 'madam');

-------------------------------------
Number Single Row Function :
-------------------------------------
i.   mod()
     Ex - select mod(10,3);   o/p-->1

ii.  power()
     Ex - select power(3,2);   o/p-->9

iii. abs()
     Ex - select abs(-12);   o/p-->12

iv. trunc()
     Ex - select trunc(652.54);   o/p-->652

v.  sqrt()
     Ex - select sqrt(2);   o/p--->1.7

vi. round(number,[scale])
     Ex -  case1: select round(454.45);          o/p-->454
             case2: select round(454.4554,2);    o/p-->454.46
             case3: select round(454.4554,-2);   o/p-->500
                       select round(454.4554,-1);   o/p-->450


=========================================================================================================
 

Date and Time functions :
------------------------------

79. WAQ to show current date ?
---   select current_date;
       select now()::date;

80.  WAQ to show current time ?
---   select current_time;
       select now()::time;

81.  WAQ to show date and time ?
---   select clock_timestamp();
       select now();

82. WAQ to calculate age ?
---  select age(timestamp '2020-05-29',timestamp '1997-04-21');

83. WAQ to extract the century ?
---  select extract(century from timestamp '2000-12-15 13:13:23');
      select extract(century from timestamp '2020-12-15');

84. WAQ to extract the decade :
---  select extract(decade from timestamp '2020-12-15');

85. WAQ to fetch the days ?
---  select extract(day from timestamp '2020-12-15');

86. WAQ to fetch the day of a given date ?
---  select extract(dow from timestamp '2020-12-15');  [dow-day of a week]

87. WAQ to calculate which day is it in the year ?
---  select extract(doy from timestamp '2020-12-15');  [doy-day of the year]

88. WAQ to calculate which week is it in the year ?
---  select extract(week from timestamp '2020-05-29');

89. WAQ to find the month ?
---  select extract(month from timestamp '2020-05-29');

90. WAQ to find hour ?
---  select extract(hour from timestamp '2020-05-29 13:13:23');

91. WAQ to find minute ?
---  select extract(min from timestamp '2020-05-29 13:13:23');


=================================================================================================

-----------
    TCL
-----------

A transaction is a unit of work that is performed against a db.
It is used with DML command(Insert, Delete, Update).

Properties : ACID property

Atomicity : This property states that a transaction must be treated as an atomic unit, that is, either all of its operations are executed or none. There must be no state in a database where a transaction is left partially completed. States should be defined either before the execution of the transaction or after the execution/abortion/failure of the transaction.

Consistancy : The database must remain in a consistent state after any transaction. No transaction should have any adverse effect on the data residing in the database. If the database was in a consistent state before the execution of a transaction, it must remain consistent after the execution of the transaction as well.

Isolation : In a database system where more than one transaction are being executed simultaneously and in parallel, the property of isolation states that all the transactions will be carried out and executed as if it is the only transaction in the system. No transaction will affect the existence of any other transaction.

Durability : The database should be durable enough to hold all its latest updates even if the system fails or restarts. If a transaction updates a chunk of data in a database and commits, then the database will hold the modified data. If a transaction commits but the system fails before the data could be written on to the disk, then that data will be updated once the system springs back into action.

TCL commands :
--------------------
1. Rollback
2. commit
3. savepoint

Steps of rollback:
---------------------
step 1 : begin;
step 2 : execute any DML command.
step 3 : rollback;
step 4 : end transaction/commit;


======================================================================================================

Note : we can't rollback after commit

steps of savepoint and rollback :
--------------------------------------
step 1 : begin;
step 2 : execute any DML command.
step 3 : savepoint savepoint_name;
step 4 : execute any DML command.
step 5 : rollback to savepoint savepoint_name;
step 6 : end transaction/commit;


---------------------
  Normalization :
---------------------
Key Attributes :  A attribute which helps us to uniquely identify in a table.

Non Key Attributes : Apart from key attributes all are non key attributes.

Prime Key Attributes : Which help us to uniquely identify in a table with the help of primary key.

Non prime key attribute : Apart from prime key attribute all are non prime key attributes.

Composite Key attribute : Combination of two or more column which is uniquely identify in a table is know as Composite key attribute.


=========================================================================================================

Super Key : The set of all the key attributes of an entity is know as "Super Key".

Foregin Key : It is use to establish the connection between two table.


-----------------------------
Functional Dependency :
-----------------------------

As the name suggest all the attributes of a table depends upon each other. 
It helps us to find anomalies.

R----->[X,Y] {empId,name}
X id determining Y  ------------  empId is determining name
Y is dependent on X -----------  name is dependent on empId

Types of Functional Dependency :
----------------------------------------
1. Total Functional Dependency
     In a relationship all the attribute are dependent upon a single attribute which is unique.
     R------>[A,B,C,D]  A is a key attribute  
     A----->{B,C,D}   B,C,D dependent on attribute A

2. Partial Functional Dependency
    A relation is said to have partial functional dependency if It consist of a composite key attribute.
    R------>[A,B,C,D]  A and B is a key attribute 
    [A,B]------->{C}
    A------->{D} 
    [A,B]------->C,D


==========================================================================================================

3. Transitive Functional Dependency
    A relation said to be Transitive Functional Dependency if there exist a relation such that an atrribute is determine by a non key attribute which intern determined by a key attribute.
    R---->[A,B,C]
    A----->B
    B----->C
    A----->C

Normalization :
------------------
The process of the decompositing the table into smaller tables in order to remove redundancy and anomalies by identifying the dependency is known as "Normalization".
or, The process of reducing the table into its Normal Form is known as "Normalization".

Normal Form : A state of table without a table redundancy and anomalies is known as "Normal Form".

Note : Table are said to be normalized if it is reduced till 3NF

Types of normal forms :
----------------------------
I. 1NF -  FIRST NORMAL FORM
      1. Table should not have duplicate row.
      2. Every cell in a table should be single value(atomic value)

II. 2NF - SECOND NORMAL FORM
      1. Table should be 1NF
      2. Table should not have partial functional dependency(should not have composite key)

III. 3NF - THIRD NORMAL FORM
      1. Table should be 2NF
      2. Table should not have transitive functional dependency.

IV. BCNF - BOYCC-CODD NORMAL FORM
      1. Table should be 3NF
      2. For any dependency A--->B, A should be a super key.

V.  4NF - FORTH NORMAL FORM
      1. Table should be BCNF
      2. Table should not have any Multi-valued Dependency

==========================================================================================================

Primary key and foreign key relation:
--------------------------------------------
create table parent(p_id int primary key,name varchar(20),age int);
create table child(per_id int,order_id int,order_no int,primary key (per_id,order_id),foreign key(per_id) references parent(p_id));

idexcel_db=# delete from parent where p_id=1;
ERROR:  update or delete on table "parent" violates foreign key constraint "child_per_id_fkey" on table "child"
DETAIL:  Key (p_id)=(1) is still referenced from table "child".


============================================================================================================
----------
  View 
----------
View is a virtual table.
It is a subset of a real table.
View can either have specific rows based on certain condition.

Syntax : CREATE VIEW view_name AS SELECT * FROM table_name WHERE condition;
              select * from view_name;
              drop view view_name;
              delete from view_name where condition;

*  To check view tables  ---  \dv

Condition :
-------------
If we perform delete then it will reflect both the table.
If we perform insert then it will reflect only origin table.


----------------------
Stored Procedure :
----------------------
It is similar to function.

Syntax:
---------
create[ or replace ] procedure_name(parameter list)
Language language_name(like PLpgSQL/SQL)
AS $$
Stored procedure body
$$;

===============================================================================================================

Step 1 - create procedure insert_person(integer,varchar)
             language 'plpgsql' 
             as $$ 
             begin 
             insert into person values($1,$2); 
             commit; 
             end; 
             $$;

Step 2 : call inser_person(1,'suraj');

* To list out the store procedure/functions - \df


===============================================================================================================
----------------------------
 User Define Function :
----------------------------
Syntax : create function function_name(Parameter)
              returns return datatype
              AS $$
              declare declaration;
              begin 
              <function body>
              return {variable / value}
              end;
              $$
              Language SQL/plpgsql;


Example 1 :
--------------
create function totalfunction()
returns integer
AS $$
declare noofrows integer;
begin
select count(*) into noofrows from employee;
return noofrows;
end;
$$
language plpgsql;

* To call the function --- select totalfunction();

Example 2 :
--------------
create function minmax(a integer,b integer,c integer,OUT max integer,OUT min integer)
AS $$
begin
max=greatest(a,b,c);
min=least(a,b,c);
end;
$$
language plpgsql;

* To call the function --- select minmax(10,20,40);

* To delete a function --- drop function function_Name;


Assignment :
---------------
Q) WAQ to create a function which insert value into the table ?
---   create function instudent(a integer,b varchar,c varchar,d varchar,e varchar,OUT result integer)
       AS $$
       begin
       insert into student values(a,b,c,d,e);
       end;
       $$
       language plpgsql;
 
===================================================================================================================
------------
 Trigger :
------------


